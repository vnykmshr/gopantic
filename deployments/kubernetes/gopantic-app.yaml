apiVersion: v1
kind: ConfigMap
metadata:
  name: gopantic-config
  namespace: default
data:
  GOPANTIC_STREAM_WORKERS: "10"
  GOPANTIC_CACHE_BACKEND: "redis"
  GOPANTIC_REDIS_ADDRESS: "redis:6379"
  GOPANTIC_METRICS_ENABLED: "true"
  GOPANTIC_LOG_LEVEL: "info"
  GOPANTIC_CIRCUIT_BREAKER_THRESHOLD: "0.1"
  GOPANTIC_RETRY_ATTEMPTS: "3"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gopantic-app
  namespace: default
  labels:
    app: gopantic-app
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: gopantic-app
  template:
    metadata:
      labels:
        app: gopantic-app
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: gopantic-app
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: gopantic-app
        image: your-registry/gopantic-app:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        envFrom:
        - configMapRef:
            name: gopantic-config
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tmp-volume
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: gopantic-app-service
  namespace: default
  labels:
    app: gopantic-app
spec:
  type: ClusterIP
  selector:
    app: gopantic-app
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 8081
    targetPort: 8081
    protocol: TCP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gopantic-app
  namespace: default

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: gopantic-app-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: gopantic-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gopantic-app-pdb
  namespace: default
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: gopantic-app