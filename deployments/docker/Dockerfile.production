# Production Dockerfile for Gopantic-based Applications
# Multi-stage build for optimal security and size

# Build stage
FROM golang:1.25-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build the application with optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o main ./cmd/your-app

# Production stage
FROM scratch

# Copy CA certificates from builder
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy the binary
COPY --from=builder /app/main /main

# Create non-root user (using numeric IDs for scratch image)
USER 65534:65534

# Health check endpoint (adjust based on your application)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/main", "health"] || exit 1

# Expose port (adjust based on your application)
EXPOSE 8080

# Set environment variables for production
ENV GO_ENV=production
ENV GOPANTIC_STREAM_WORKERS=10
ENV GOPANTIC_CACHE_ENABLED=true
ENV GOPANTIC_METRICS_ENABLED=true

# Run the application
ENTRYPOINT ["/main"]