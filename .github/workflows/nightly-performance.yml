name: Nightly Performance Monitoring

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  GO_VERSION: '1.21'

jobs:
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false

    - name: Download dependencies
      run: go mod download

    - name: Run comprehensive benchmarks
      run: |
        echo "# 📊 Nightly Performance Report - $(date)" > performance_report.md
        echo "" >> performance_report.md
        
        echo "## 🏃‍♂️ Core Performance Benchmarks" >> performance_report.md
        echo "\`\`\`" >> performance_report.md
        make bench-compare >> performance_report.md 2>&1
        echo "\`\`\`" >> performance_report.md
        echo "" >> performance_report.md
        
        echo "## 💾 Memory Allocation Analysis" >> performance_report.md
        echo "\`\`\`" >> performance_report.md
        make bench-memory >> performance_report.md 2>&1
        echo "\`\`\`" >> performance_report.md
        echo "" >> performance_report.md
        
        echo "## ⚡ Cache Performance" >> performance_report.md
        echo "\`\`\`" >> performance_report.md
        make bench-cache >> performance_report.md 2>&1
        echo "\`\`\`" >> performance_report.md
        echo "" >> performance_report.md
        
        echo "## 🔄 Concurrent Processing" >> performance_report.md
        echo "\`\`\`" >> performance_report.md
        make bench-concurrent >> performance_report.md 2>&1
        echo "\`\`\`" >> performance_report.md
        echo "" >> performance_report.md
        
        echo "## 🔧 Optimization Comparison" >> performance_report.md
        echo "\`\`\`" >> performance_report.md
        go test -bench=BenchmarkTypeCoercion -benchmem ./tests >> performance_report.md 2>&1
        echo "\`\`\`" >> performance_report.md
        echo "" >> performance_report.md

        echo "## 📈 Performance Metrics" >> performance_report.md
        echo "\`\`\`" >> performance_report.md
        go test -bench=BenchmarkMemoryAllocation -benchmem ./tests >> performance_report.md 2>&1
        echo "\`\`\`" >> performance_report.md
        echo "" >> performance_report.md
        
        echo "---" >> performance_report.md
        echo "*Generated on $(date) by GitHub Actions*" >> performance_report.md
      env:
        REDIS_URL: localhost:6379

    - name: Run profiling benchmarks
      run: |
        mkdir -p performance_profiles
        echo "Generating CPU and memory profiles..."
        make bench-profile
        
        # Generate additional profiles for analysis
        go test -bench=BenchmarkComplexParsing -cpuprofile=performance_profiles/complex_cpu.prof -memprofile=performance_profiles/complex_mem.prof ./tests
        go test -bench=BenchmarkTypeCoercion -cpuprofile=performance_profiles/concurrent_cpu.prof -memprofile=performance_profiles/concurrent_mem.prof ./tests

    - name: Upload performance profiles
      uses: actions/upload-artifact@v4
      with:
        name: performance-profiles-${{ github.sha }}
        path: |
          benchmark_results/
          performance_profiles/
        retention-days: 30

    - name: Check for performance regressions
      run: |
        # Download previous benchmark results if available
        if [ -f "previous_benchmarks.txt" ]; then
          echo "## 🔍 Performance Trend Analysis" >> performance_report.md
          echo "" >> performance_report.md
          echo "Comparing with previous run..." >> performance_report.md
          echo "\`\`\`" >> performance_report.md
          benchcmp previous_benchmarks.txt current_benchmarks.txt >> performance_report.md 2>&1 || echo "No significant changes detected" >> performance_report.md
          echo "\`\`\`" >> performance_report.md
        fi
        
        # Save current benchmarks for next comparison
        go test -bench=. -benchmem ./tests > current_benchmarks.txt

    - name: Create performance issue on regression
      uses: actions/github-script@v7
      if: failure()
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('performance_report.md')) {
            const report = fs.readFileSync('performance_report.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Performance Regression Detected - ${new Date().toISOString().split('T')[0]}`,
              body: `## Performance Regression Alert\n\n${report}\n\n**Action Required:** Please investigate the performance regression detected in the nightly monitoring.`,
              labels: ['performance', 'regression', 'bug']
            });
          }

    - name: Post performance summary
      uses: actions/github-script@v7
      if: success()
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('performance_report.md')) {
            const report = fs.readFileSync('performance_report.md', 'utf8');
            
            // Extract key metrics for summary
            const lines = report.split('\n');
            let summary = '## ✅ Nightly Performance Check - All Good!\n\n';
            summary += '**Key Metrics:**\n';
            
            // Look for benchmark results and extract key numbers
            const benchmarkLines = lines.filter(line => 
              line.includes('BenchmarkGopantic') || 
              line.includes('BenchmarkStdJSON') ||
              line.includes('ns/op') ||
              line.includes('allocs/op')
            );
            
            if (benchmarkLines.length > 0) {
              summary += '```\n';
              summary += benchmarkLines.slice(0, 10).join('\n'); // First 10 lines
              summary += '\n```\n\n';
            }
            
            summary += `[Full Report Artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n`;
            summary += '*Automated performance monitoring ensures gopantic maintains optimal performance.*';
            
            console.log('Performance monitoring completed successfully');
            console.log(summary);
          }

  benchmark-comparison:
    name: Historical Benchmark Comparison
    runs-on: ubuntu-latest
    needs: performance-monitoring
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get full history for comparison

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Compare with previous versions
      run: |
        echo "# 📈 Historical Performance Comparison" > historical_comparison.md
        echo "" >> historical_comparison.md
        
        # Get last 5 commits for comparison
        git log --oneline -5 --pretty=format:"%h %s" > recent_commits.txt
        
        echo "## Recent Commits Performance Impact" >> historical_comparison.md
        echo "\`\`\`" >> historical_comparison.md
        cat recent_commits.txt >> historical_comparison.md
        echo "\`\`\`" >> historical_comparison.md
        echo "" >> historical_comparison.md
        
        # Run benchmarks on current version
        echo "## Current Performance (HEAD)" >> historical_comparison.md
        echo "\`\`\`" >> historical_comparison.md
        go test -bench=BenchmarkOptimizationComparison -benchmem -count=1 ./benchmarks >> historical_comparison.md 2>&1
        echo "\`\`\`" >> historical_comparison.md

    - name: Upload historical comparison
      uses: actions/upload-artifact@v4
      with:
        name: historical-comparison-${{ github.sha }}
        path: historical_comparison.md
        retention-days: 90